// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`vue-js Snapshots makeIndexImports 1`] = `
Object {
  "react-ts/index.tsx": "// DEVELOPER NOTE: These components are ready to lazy-load. You may also import components directly.

export const blah.js = () => import(\\"./blah.js\\");
",
  "react-ts/indexNotLazy.tsx": "// DEVELOPER NOTE: This file includes all components so importing this file may be very inefficient. Use carefully! You may prefer to import components directly or use index.js which has import functions, typically treated as a code splitting point.

export { default as blahJs } from \\"./blah.js\\";
",
}
`;

exports[`vue-js Snapshots vue-js: <img src="pic.jpeg" class="frogs"> 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "vue-js/imgSrc.vue": "<template>
  <img
    class=\\"frogs\\"
    v-bind:src=\\"src\\"
    v-bind:width=\\"width\\"
    v-bind:height=\\"height\\"
    v-bind:srcset=\\"srcset\\"
    v-bind:crossorigin=\\"crossorigin\\"
  />
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    src: { type: String, required: true },
    width: { type: String, required: false },
    height: { type: String, required: false },
    srcset: { type: String, required: false },
    crossorigin: { type: String, required: false }
  },
  computed: {}
});
</script>
<style scoped>
.frogs {
  background: green;
}
</style>
",
      },
      "formatId": "vue-js",
    },
  ],
}
`;

exports[`vue-js Snapshots vue-js: Basic variables 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "vue-js/paragraph.vue": "<template>
  <p>
    <slot></slot>
  </p>
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: { children: { required: false, default: \\"Some placeholder text\\" } },
  computed: {}
});
</script>
",
      },
      "formatId": "vue-js",
    },
  ],
}
`;

exports[`vue-js Snapshots vue-js: Boolean attribute values 1`] = `
Array [
  Object {
    "files": Object {
      "vue-js/row.vue": "<template>
  <div v-bind:class=\\"computed__class\\">
    <slot></slot>
  </div>
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    isReversed: { type: Boolean, default: false, required: false },
    children: { required: false, default: \\"Columns\\" }
  },
  computed: {
    computed__class() {
      return \\"g-flex-row\\" + (this.isReversed ? \\" g-flex-reverse\\" : \\"\\");
    }
  }
});
</script>
<style scoped>
.g-flex-row {
  color: red;
}
.g-flex-row.g-flex-reverse {
  color: blue;
}
</style>
",
    },
    "formatId": "vue-js",
  },
]
`;

exports[`vue-js Snapshots vue-js: Boolean attribute values 2`] = `
Array [
  Object {
    "files": Object {
      "vue-js/row.vue": "<template>
  <div v-bind:class=\\"computed__class\\">
    <fieldset
      v-bind:aria-describedby=\\"computed__ariaDescribedby\\"
      class=\\"g-fieldset\\"
    >
      <legend class=\\"g-fieldset__legend\\">
        <slot name=\\"legend\\"></slot>
      </legend>

      <div class=\\"g-hint\\" v-bind:id=\\"hintId\\">
        <slot name=\\"hint\\"></slot>
      </div>

      <div class=\\"g-error-message\\" v-bind:id=\\"errorId\\">
        <span class=\\"g-visually-hidden\\">
          Error:
        </span>

        <slot name=\\"error\\"></slot>
      </div>

      <div>
        <slot></slot>
      </div>
    </fieldset>
  </div>
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    errorId: { type: String, required: false },
    hintId: { type: String, required: false },
    legend: { required: false, default: \\"Legend text\\" },
    hint: { required: false, default: \\"Hint text\\" },
    error: { required: false, default: \\"Error text\\" },
    children: { required: false, default: \\"Fieldset contents\\" }
  },
  computed: {
    computed__class() {
      return \\"g-form-group\\" + (this.errorId ? \\" g-form-group--error\\" : \\"\\");
    },
    computed__ariaDescribedby() {
      return +this.hintId + +this.errorId;
    }
  }
});
</script>
",
    },
    "formatId": "vue-js",
  },
]
`;

exports[`vue-js Snapshots vue-js: Enum attribute values 1`] = `
Array [
  Object {
    "files": Object {
      "vue-js/container.vue": "<template>
  <div v-bind:class=\\"computed__class\\">
    <slot></slot>
  </div>
</template>
<script>
import Vue from \\"vue\\";

const constants = {
  containerType: {
    \\"g-flex-container\\": \\"g-flex-container\\",
    \\"g-flex-container-fluid\\": \\"g-flex-container-fluid\\"
  }
};

export default Vue.extend({
  props: {
    containerType: {
      type: String,
      validator: value => {
        return (
          [\\"g-flex-container\\", \\"g-flex-container-fluid\\"].indexOf(value) !== -1
        );
      },
      required: true
    },
    children: { required: false, default: \\"Rows...\\" }
  },
  computed: {
    computed__class() {
      return constants.containerType[this.containerType] !== undefined
        ? constants.containerType[this.containerType]
        : \\"\\";
    }
  }
});
</script>
<style scoped>
.g-flex-container,
.g-flex-container-fluid {
  background: red;
  color: purple;
}
.g-flex-container-fluid {
  color: red;
}
@media only screen and (min-width: 48em) {
  .g-flex-container {
    color: blue;
  }
}
</style>
",
    },
    "formatId": "vue-js",
  },
]
`;

exports[`vue-js Snapshots vue-js: Form input[checked] 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "vue-js/input.vue": "<template>
  <input
    v-bind:id=\\"textId\\"
    type=\\"checkbox\\"
    v-bind:disabled=\\"disabled\\"
    v-bind:readonly=\\"readOnly\\"
    v-bind:autofocus=\\"autoFocus\\"
    v-bind:name=\\"name\\"
    v-bind:value=\\"value\\"
    v-bind:checked=\\"checked\\"
  />
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    textId: { type: String, required: false },
    disabled: { type: Boolean, default: false, required: false },
    readOnly: { type: Boolean, default: false, required: false },
    autoFocus: { type: Boolean, default: false, required: false },
    name: { type: String, required: true },
    value: { type: String, required: false },
    checked: { type: Boolean, default: false, required: false }
  },
  computed: {}
});
</script>
",
      },
      "formatId": "vue-js",
    },
  ],
}
`;

exports[`vue-js Snapshots vue-js: Form label input[checked] 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "vue-js/input.vue": "<template>
  <label v-bind:for=\\"textId\\">
    <input
      v-bind:id=\\"textId\\"
      type=\\"checkbox\\"
      v-bind:disabled=\\"disabled\\"
      v-bind:readonly=\\"readOnly\\"
      v-bind:autofocus=\\"autoFocus\\"
      v-bind:name=\\"name\\"
      v-bind:value=\\"value\\"
      v-bind:checked=\\"checked\\"
    />
  </label>
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    textId: { type: String, required: false },
    disabled: { type: Boolean, default: false, required: false },
    readOnly: { type: Boolean, default: false, required: false },
    autoFocus: { type: Boolean, default: false, required: false },
    name: { type: String, required: true },
    value: { type: String, required: false },
    checked: { type: Boolean, default: false, required: false }
  },
  computed: {}
});
</script>
",
      },
      "formatId": "vue-js",
    },
  ],
}
`;

exports[`vue-js Snapshots vue-js: H1 with configurable Id 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "vue-js/h1Id.vue": "<template>
  <h1 v-bind:id=\\"id\\">
    stuff
  </h1>
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: { id: { type: String, required: false } },
  computed: {}
});
</script>
",
      },
      "formatId": "vue-js",
    },
  ],
}
`;

exports[`vue-js Snapshots vue-js: Link with boolean class 1`] = `
Array [
  Object {
    "files": Object {
      "vue-js/a.vue": "<template>
  <a
    v-bind:class=\\"computed__class\\"
    v-bind:href=\\"href\\"
    v-bind:rel=\\"rel\\"
    v-bind:target=\\"target\\"
  >
    <slot></slot>
  </a>
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    isMuted: { type: Boolean, default: false, required: false },
    href: { type: String, required: true },
    rel: { type: String, required: false },
    target: { type: String, required: false },
    children: { required: false, default: \\"Example text\\" }
  },
  computed: {
    computed__class() {
      return \\"g-link\\" + (this.isMuted ? \\" g-link--muted\\" : \\"\\");
    }
  }
});
</script>
<style scoped>
.g-link {
  color: white;
}
.g-link--muted {
  opacity: 0.5;
}
</style>
",
    },
    "formatId": "vue-js",
  },
]
`;

exports[`vue-js Snapshots vue-js: Lots of enum attribute values 1`] = `
Array [
  Object {
    "files": Object {
      "vue-js/container.vue": "<template>
  <div v-bind:class=\\"computed__class\\">
    <slot></slot>
  </div>
</template>
<script>
import Vue from \\"vue\\";

const constants = {
  columnXs: {
    \\"g-flex-col-xs\\": \\"g-flex-col-xs\\",
    \\"g-flex-col-xs-1\\": \\"g-flex-col-xs-1\\",
    \\"g-flex-col-xs-2\\": \\"g-flex-col-xs-2\\",
    \\"g-flex-col-xs-3\\": \\"g-flex-col-xs-3\\",
    \\"g-flex-col-xs-4\\": \\"g-flex-col-xs-4\\",
    \\"g-flex-col-xs-5\\": \\"g-flex-col-xs-5\\",
    \\"g-flex-col-xs-6\\": \\"g-flex-col-xs-6\\",
    \\"g-flex-col-xs-7\\": \\"g-flex-col-xs-7\\",
    \\"g-flex-col-xs-8\\": \\"g-flex-col-xs-8\\",
    \\"g-flex-col-xs-9\\": \\"g-flex-col-xs-9\\",
    \\"g-flex-col-xs-10\\": \\"g-flex-col-xs-10\\",
    \\"g-flex-col-xs-11\\": \\"g-flex-col-xs-11\\",
    \\"g-flex-col-xs-12\\": \\"g-flex-col-xs-12\\"
  }
};

export default Vue.extend({
  props: {
    isReversed: { type: Boolean, default: false, required: false },
    columnXs: {
      type: String,
      validator: value => {
        return (
          [
            \\"g-flex-col-xs\\",
            \\"g-flex-col-xs-1\\",
            \\"g-flex-col-xs-2\\",
            \\"g-flex-col-xs-3\\",
            \\"g-flex-col-xs-4\\",
            \\"g-flex-col-xs-5\\",
            \\"g-flex-col-xs-6\\",
            \\"g-flex-col-xs-7\\",
            \\"g-flex-col-xs-8\\",
            \\"g-flex-col-xs-9\\",
            \\"g-flex-col-xs-10\\",
            \\"g-flex-col-xs-11\\",
            \\"g-flex-col-xs-12\\"
          ].indexOf(value) !== -1
        );
      },
      required: true
    },
    children: { required: false, default: \\"Columns\\" }
  },
  computed: {
    computed__class() {
      return (
        \\"g-flex-col\\" +
        (this.isReversed ? \\" g-flex-reverse\\" : \\"\\") +
        (constants.columnXs[this.columnXs] !== undefined
          ? \` \${constants.columnXs[this.columnXs]}\`
          : \\"\\")
      );
    }
  }
});
</script>
<style scoped>
.g-flex-col.g-flex-reverse {
  color: red;
}
.g-flex-col-xs {
  color: blue;
}
</style>
",
    },
    "formatId": "vue-js",
  },
]
`;

exports[`vue-js Snapshots vue-js: form input[text] 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "vue-js/input.vue": "<template>
  <label v-bind:for=\\"textId\\">
    Label text
  </label>

  <input
    v-bind:id=\\"textId\\"
    type=\\"text\\"
    v-bind:disabled=\\"disabled\\"
    v-bind:readonly=\\"readOnly\\"
    v-bind:autofocus=\\"autoFocus\\"
    v-bind:name=\\"name\\"
    v-bind:value=\\"value\\"
    v-bind:spellcheck=\\"spellCheck\\"
    v-bind:maxlength=\\"maxLength\\"
    v-bind:autocomplete=\\"autoComplete\\"
  />
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    textId: { type: String, required: false },
    disabled: { type: Boolean, default: false, required: false },
    readOnly: { type: Boolean, default: false, required: false },
    autoFocus: { type: Boolean, default: false, required: false },
    name: { type: String, required: true },
    value: { type: String, required: false },
    spellCheck: { type: Boolean, default: false, required: false },
    maxLength: { type: String, required: false },
    autoComplete: { type: String, required: true }
  },
  computed: {}
});
</script>
",
      },
      "formatId": "vue-js",
    },
  ],
}
`;

exports[`vue-js vue-js: CSS Configuration (CSS Variables and Scss Variables) 1`] = `
Array [
  Object {
    "files": Object {
      "vue-js/a.vue": "<template>
  <a
    v-bind:class=\\"computed__class\\"
    v-bind:href=\\"href\\"
    v-bind:rel=\\"rel\\"
    v-bind:target=\\"target\\"
  >
    <slot></slot>
  </a>
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    isMuted: { type: Boolean, default: false, required: false },
    href: { type: String, required: true },
    rel: { type: String, required: false },
    target: { type: String, required: false },
    children: { required: false, default: \\"Example text\\" }
  },
  computed: {
    computed__class() {
      return \\"g-link\\" + (this.isMuted ? \\" g-link--muted\\" : \\"\\");
    }
  }
});
</script>
<style scoped>
.g-link {
  color: #ffffff !important;
}
.g-link--muted {
  opacity: 0.5;
}
</style>
",
    },
    "formatId": "vue-js",
  },
]
`;

exports[`vue-js vue-js: CSS Configuration (CSS Variables and Scss Variables) 2`] = `
Array [
  Object {
    "files": Object {
      "vue-js/a.vue": "<template>
  <a
    v-bind:class=\\"computed__class\\"
    v-bind:href=\\"href\\"
    v-bind:rel=\\"rel\\"
    v-bind:target=\\"target\\"
  >
    <slot></slot>
  </a>
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    isMuted: { type: Boolean, default: false, required: false },
    href: { type: String, required: true },
    rel: { type: String, required: false },
    target: { type: String, required: false },
    children: { required: false, default: \\"Example text\\" }
  },
  computed: {
    computed__class() {
      return \\"g-link\\" + (this.isMuted ? \\" g-link--muted\\" : \\"\\");
    }
  }
});
</script>
<style scoped>
.g-link {
  background: #ffffff url(\\"big.gif\\") !important;
}
.g-link--muted {
  opacity: 0.5;
}
</style>
",
    },
    "formatId": "vue-js",
  },
]
`;

exports[`vue-js vue-js: CSS Configuration of Fonts 1`] = `
Array [
  Object {
    "files": Object {
      "vue-js/a.vue": "<template>
  <a class=\\"g-link\\" v-bind:href=\\"href\\" v-bind:rel=\\"rel\\" v-bind:target=\\"target\\">
    <slot></slot>
  </a>
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    href: { type: String, required: true },
    rel: { type: String, required: false },
    target: { type: String, required: false },
    children: { required: false, default: \\"Example text\\" }
  },
  computed: {}
});
</script>
<style scoped>
.g-link {
  font-family: Arial, sans-serif;
}
</style>
",
    },
    "formatId": "vue-js",
  },
]
`;

exports[`vue-js vue-js: CalculatedProps 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "vue-js/textbox.vue": "<template>
  <input
    v-bind:disabled=\\"disabled\\"
    v-bind:readonly=\\"readOnly\\"
    v-bind:autofocus=\\"autoFocus\\"
    v-bind:name=\\"name\\"
    v-bind:value=\\"value\\"
    v-bind:min=\\"min\\"
    v-bind:max=\\"max\\"
    v-bind:type=\\"type\\"
    v-bind:spellcheck=\\"spellCheck\\"
    v-bind:maxlength=\\"maxLength\\"
    v-bind:autocomplete=\\"autoComplete\\"
  />
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    disabled: { type: Boolean, default: false, required: false },
    readOnly: { type: Boolean, default: false, required: false },
    autoFocus: { type: Boolean, default: false, required: false },
    name: { type: String, required: true },
    value: { type: String, required: false },
    min: { type: String, required: false },
    max: { type: String, required: false },
    type: { type: String, required: true },
    spellCheck: { type: Boolean, default: false, required: false },
    maxLength: { type: String, required: false },
    autoComplete: { type: String, required: true }
  },
  computed: {}
});
</script>
",
      },
      "formatId": "vue-js",
    },
  ],
}
`;

exports[`vue-js vue-js: jsxToUsageCode with boolean false 1`] = `
Object {
  "vue-js": "<template>
  <c-ul isBulleted=\\"false\\">
    <c-li>
      Unordered item one
    </c-li>
    <c-li>
      Unordered item two
    </c-li>
  </c-ul>
</template>
<script>
import Vue from \\"vue\\";
import Ul from \\"@govtnz/ds/build/vue-js/Ul.vue\\";
import Li from \\"@govtnz/ds/build/vue-js/Li.vue\\";

export default { components: { \\"c-ul\\": Ul, \\"c-li\\": Li } };
</script>
",
}
`;

exports[`vue-js vue-js: jsxToUsageCode with boolean false and inline HTML 1`] = `
Object {
  "vue-js": "<template>
  <c-ul isBulleted=\\"false\\">
    <c-li>
      Unordered<a href=\\"http://zombo.com/\\">
        item one
      </a>
    </c-li>
    <c-li>
      Unordered item two
    </c-li>
  </c-ul>
</template>
<script>
import Vue from \\"vue\\";
import Ul from \\"@govtnz/ds/build/vue-js/Ul.vue\\";
import Li from \\"@govtnz/ds/build/vue-js/Li.vue\\";

export default { components: { \\"c-ul\\": Ul, \\"c-li\\": Li } };
</script>
",
}
`;

exports[`vue-js vue-js: jsxToUsageCode with boolean true 1`] = `
Object {
  "vue-js": "<template>
  <c-ul isBulleted>
    <c-li>
      Unordered item one
    </c-li>
    <c-li>
      Unordered item two
    </c-li>
  </c-ul>
</template>
<script>
import Vue from \\"vue\\";
import Ul from \\"@govtnz/ds/build/vue-js/Ul.vue\\";
import Li from \\"@govtnz/ds/build/vue-js/Li.vue\\";

export default { components: { \\"c-ul\\": Ul, \\"c-li\\": Li } };
</script>
",
}
`;

exports[`vue-js vue-js: jsxToUsageCode with enumerations 1`] = `
Object {
  "vue-js": "<template>
  <c-div containerType=\\"fixed\\" />
</template>
<script>
import Vue from \\"vue\\";
import Div from \\"@govtnz/ds/build/vue-js/Div.vue\\";

export default { components: { \\"c-div\\": Div } };
</script>
",
}
`;

exports[`vue-js vue-js: makeUsage 1`] = `
Object {
  "vue-js": "<template>
  <c-h1>
    <c-a href=\\"https://html5zombo.com/\\" reversed=\\"On\\">
      Click me
    </c-a>
  </c-h1>
</template>
<script>
import Vue from \\"vue\\";
import H1 from \\"@govtnz/ds/build/vue-js/H1.vue\\";
import A from \\"@govtnz/ds/build/vue-js/A.vue\\";

export default { components: { \\"c-h1\\": H1, \\"c-a\\": A } };
</script>
",
}
`;

exports[`vue-js vue-js: makeUsage with booleans 1`] = `
Object {
  "vue-js": "<template>
  <c-h1>
    <c-a href=\\"https://html5zombo.com/\\" isReversed>
      Click me
    </c-a>
  </c-h1>
</template>
<script>
import Vue from \\"vue\\";
import H1 from \\"@govtnz/ds/build/vue-js/H1.vue\\";
import A from \\"@govtnz/ds/build/vue-js/A.vue\\";

export default { components: { \\"c-h1\\": H1, \\"c-a\\": A } };
</script>
",
}
`;

exports[`vue-js vue-js: renders aria-current 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "vue-js/ariacurrent.vue": "<template>
  <a
    v-bind:aria-current=\\"ariaCurrent\\"
    v-bind:href=\\"href\\"
    v-bind:rel=\\"rel\\"
    v-bind:target=\\"target\\"
  >
    test
  </a>
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    ariaCurrent: { type: String, required: false },
    href: { type: String, required: true },
    rel: { type: String, required: false },
    target: { type: String, required: false }
  },
  computed: {}
});
</script>
",
      },
      "formatId": "vue-js",
    },
  ],
}
`;

exports[`vue-js vue-js: renders aria-expanded 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "vue-js/ariaexpanded.vue": "<template>
  <button v-bind:aria-expanded=\\"isOpen\\" v-bind:name=\\"name\\" v-bind:type=\\"type\\">
    test
  </button>
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    isOpen: { type: String, required: true },
    name: { type: String, required: false },
    type: { type: String, required: false }
  },
  computed: {}
});
</script>
",
      },
      "formatId": "vue-js",
    },
  ],
}
`;

exports[`vue-js vue-js: retains name prop 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "vue-js/textboxes.vue": "<template>
  <input
    v-bind:id=\\"yearId\\"
    maxlength=\\"4\\"
    v-bind:name=\\"yearName\\"
    type=\\"text\\"
    v-bind:disabled=\\"disabled\\"
    v-bind:readonly=\\"readOnly\\"
    v-bind:autofocus=\\"autoFocus\\"
    v-bind:value=\\"value\\"
    v-bind:spellcheck=\\"spellCheck\\"
    v-bind:autocomplete=\\"autoComplete\\"
  />

  <input
    v-bind:id=\\"monthId\\"
    maxlength=\\"2\\"
    v-bind:name=\\"monthName\\"
    type=\\"text\\"
    v-bind:value=\\"value2\\"
    v-bind:disabled=\\"disabled\\"
    v-bind:readonly=\\"readOnly\\"
    v-bind:autofocus=\\"autoFocus\\"
    v-bind:spellcheck=\\"spellCheck\\"
    v-bind:autocomplete=\\"autoComplete\\"
  />

  <input
    v-bind:id=\\"dayId\\"
    maxlength=\\"2\\"
    v-bind:name=\\"dayName\\"
    type=\\"text\\"
    v-bind:value=\\"value3\\"
    v-bind:disabled=\\"disabled\\"
    v-bind:readonly=\\"readOnly\\"
    v-bind:autofocus=\\"autoFocus\\"
    v-bind:spellcheck=\\"spellCheck\\"
    v-bind:autocomplete=\\"autoComplete\\"
  />
</template>
<script>
import Vue from \\"vue\\";

export default Vue.extend({
  props: {
    yearId: { type: String, required: false },
    disabled: { type: Boolean, default: false, required: false },
    readOnly: { type: Boolean, default: false, required: false },
    autoFocus: { type: Boolean, default: false, required: false },
    yearName: { type: String, required: true },
    value: { type: String, required: false },
    spellCheck: { type: Boolean, default: false, required: false },
    autoComplete: { type: String, required: true },
    monthId: { type: String, required: false },
    monthName: { type: String, required: true },
    value2: { type: String, required: false },
    dayId: { type: String, required: false },
    dayName: { type: String, required: true },
    value3: { type: String, required: false }
  },
  computed: {}
});
</script>
",
      },
      "formatId": "vue-js",
    },
  ],
}
`;
